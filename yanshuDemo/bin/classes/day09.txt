1、/data/data/cn.yanshu/database/test.db 
      写一个类继承自sqliteOpenHelper (必须显示调用父类构造函数传入context,databasename) 
      用这个类可以获取一个database实例对象 
      创建一个test名字的数据库
 
 2、自定义contentProvider步骤：
 ----------------------------------------------------------------------------------------
 public class SmsProvider extends ContentProvider {
	
	
	private  SQLiteOpenHelper sqLiteOpenHelper;
	
	private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
	private static final int INSERTSUCCESS = 1;
	private static final int DELETESUCCESS = 1;
	private static final int UPDATESUCCESS = 1;
	private static final int SELECTSUCCESS = 1;

    static
    {
        sURIMatcher.addURI("cn.yanshu", "sms/insert", INSERTSUCCESS);
        sURIMatcher.addURI("cn.yanshu", "sms/delete", DELETESUCCESS);
        sURIMatcher.addURI("cn.yanshu", "update", UPDATESUCCESS);
        sURIMatcher.addURI("cn.yanshu", "select", SELECTSUCCESS);
      
    }
	
	/**
	 * smsProvider初始化的时候 获取一个可写的database实例
	 * 
	 * getContext()  获取上下文对象  在provider中
	 * */
    
	@Override
	public boolean onCreate() {
		// TODO Auto-generated method stub
		sqLiteOpenHelper=new MySqliteOpenHelper(getContext(), "test");
		return false;
	}
    
	
	
	@Override
	public Uri insert(Uri arg0, ContentValues arg1) {
		// TODO Auto-generated method stub
		if(sURIMatcher.match(arg0)==INSERTSUCCESS){
			long  count=sqLiteOpenHelper.getWritableDatabase().insert("sms", null, arg1);
			Uri  return_uri=Uri.parse("插入到"+count+"条");
			return return_uri;
		}
		else{
			throw  new RuntimeException("路径匹配失败 contentProvider拒绝访问");
		}
	
	}
}
---------------------------------------------------------------------------------------- 
清单文件写法：
<!-- android:authorities="cn.yanshu"  相当于url 路径匹配符 -->
             <provider android:name="cn.yanshu.provider.SmsProvider" 
                  android:authorities="cn.yanshu"  android:exported="true"
                  >
              </provider>  
   ----------------------------------------------------------------
   外部调用写法：
   public void click(View view){
		Uri uri=Uri.parse("content://cn.yanshu/sms/insert");
		ContentValues  values=new ContentValues();
		values.put("people", "chouchounew");
		values.put("content", "chouchou is so clever");
		getContentResolver().insert(uri, values);
		
	}
	
3、android 系统应用sms
   uri="content://sms"
   
 4、系统应用contact  (实际我们只关注raw_contact data两个表 其中data是视图mimetype)
   uri="content://com.android.contacts/data"
   uri="content://com.android.contacts/raw_contacts"
        实际映射的是一个视图表  mimetype 存在
        
  5、查询联系人案例：
     a、获取raw_contact表所有非null的contactid 
     b、遍历这个集合 获取这个contactid=上面的所有cursor  循环游标根据mimetype 注入属性
     
  6、插入联系人案例
     a、先插入row_contact表contactid  需要计算插入的值
     b、插入data数据表  插入是实体表 mimetype 
   